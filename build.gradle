import org.apache.tools.ant.filters.EscapeUnicode

buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'org.glavo'
version '4.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compile 'com.google.code.gson:gson:2.8.2'

    compile 'org.glavo:kotlinfx:0.1.0'

    // https://mvnrepository.com/artifact/org.fxmisc.richtext/richtextfx
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.8.2'

}


compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    manifest {
        attributes 'Implementation-Version': '1.2',
                'Main-Class': 'org.glavo.viewer.gui.Viewer'
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Implementation-Version': '1.2',
                'Main-Class': 'org.glavo.viewer.gui.Viewer'
    }
    with jar
}

task run(type: JavaExec, dependsOn: fatJar) {
    main = "-jar"
    //noinspection GroovyAssignabilityCheck
    args fatJar.archivePath
}

tasks.withType(ProcessResources).each { task ->
    task.from(task.getSource()) {
        include '**/*.properties'
        filter(EscapeUnicode)
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}


